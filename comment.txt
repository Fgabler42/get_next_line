// free_it: is a function that frees memory allocated
// to a string, but only if the string is not NULL.

// get_text_from_file : is a function that reads text from
// a file descriptor and returns
// it as a character string.

// This function copies a line of text from a buffer and
// returns it as a new string. The function takes in a
// buffer as its argument.

// get_next_line: is a function that reads and returns the
// next line rom a file descriptor. The function takes
// in a file descriptor as its argument.

// int main: is a main function that tests the get_next_line()
// function by reading lines from a file descriptor
// and printing them to the console.

// ft_strchr: is a function that takes two arguments: a pointer
// to the string str, and an integer c that represents
// the character to be searched for. The integer c is cast
// to a char in the function to allow for comparison with the
// characters in the string.

// ft_bzero: is a function that initializes a char pointer f to the same address as s,
// and then loops n times, setting each byte in the memory block to
// zero by assigning the null character '\0' to it.

// ft_strlen: The function initializes a size_t variable i to zero
// and then loops through the string, incrementing
// i for each character in the string until the null
// terminator '\0' is reached. Once the null terminator
// is reached, the function returns the final value of i,
// which represents the length of the string.

// ft_calloc : This is an implementation of the standard C library
// function calloc, which allocates a block of memory
// for an array of elements and initializes the memory
// to zero. The function takes two arguments: nitems,
// which represents the number of elements to allocate,
// and size, which represents the size in bytes of
// each element.

// ft_strjoin_mod: The function initializes two unsigned int
// variables i and j to zero, and a char pointer
// new to null. The function then checks whether
// both s1 and s2 are null pointers and returns
// null if they are.